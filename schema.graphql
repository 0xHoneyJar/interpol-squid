type Vault @entity {
  id: ID!
  owner: String! @index
  timestamp: BigInt!
  address: String!
}

type LPToken @entity {
  id: ID!
  address: String! @index
  name: String
  symbol: String
  factory: String! @index
  factoryType: String! @index
  token0: String! @index
  token1: String! @index
  fee: BigInt
}

type VaultDeposit @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  amount: BigInt!
  timestamp: BigInt!
  lockExpiration: BigInt
  transactionHash: String!
}

type VaultWithdrawal @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type VaultTotalDeposit @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  amount: BigInt!
  lockExpiration: BigInt
}

type VaultStake @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  stakingContract: String! @index
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type VaultUnstake @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  stakingContract: String! @index
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type VaultTotalStake @entity {
  id: ID!
  vaultAddress: String! @index
  tokenAddress: String!
  stakingContract: String! @index
  amount: BigInt!
}

type Fees @entity {
  id: ID!
  referral: String!
  tokenAddress: String!
  amount: BigInt!
  transactionHash: String!
}

type BGTDelegation @entity {
  id: ID!
  vaultAddress: String! @index
  validator: String!
  queued: BigInt!
  activated: BigInt!
}

type VaultRewardsClaim @entity {
  id: ID!
  vaultAddress: String! @index
  stakingContract: String! @index
  timestamp: BigInt!
  transactionHash: String!
}

type XKDKFinalizedRedeem @entity {
  id: ID!
  vaultAddress: String! @index
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type XKDKRedeem @entity {
  id: ID!
  vaultAddress: String! @index
  xKodiakAmount: BigInt!
  kodiakAmount: BigInt!
  duration: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}